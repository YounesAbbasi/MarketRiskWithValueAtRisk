ghddens <- dghyp(ef$x, ghdfit)
hypdens <- dghyp(ef$x, hypfit)
nigdens <- dghyp(ef$x, nigfit)
nordens <- dnorm(ef$x, mean = mean(yret), sd=sd(c(yret[,1])))
col.def <- c('black', 'red', 'blue', 'green', 'orange')
jpeg(paste(Vniki[1,5],"_density.jpeg", sep = ''), )
plot(ef, xlab = '', ylab = expression(f(x)), ylim = c(0, 0.45))
lines(ef$x, ghddens, col = 'red')
lines(ef$x, hypdens, col = 'blue')
lines(ef$x, nigdens, col = 'green')
lines(ef$x, nordens, col = 'orange')
legend('topleft', legend = c("empirical" , "GHD" , "HYP" , "NIG" , "NORM"),
col = col.def,  lty = 1)
name = paste("density_",Vniki[1,5], sep = '')
dev.off()
#save.image(paste("density_",Vniki[1,5], sep = ''))
## QQ-Plots
qqghyp(ghdfit, line = TRUE, ghyp.col = 'red',
plot.legend = FALSE, gaussian = FALSE,
main = '', cex = 0.8)
qqghyp(hypfit, add = TRUE, ghyp.pch = 2, ghyp.col = 'blue',
gaussian = FALSE, line = FALSE, cex = 0.8)
qqghyp(nigfit, add = TRUE, ghyp.pch = 3, ghyp.col = 'green',
gaussian = FALSE, line = FALSE, cex = 0.8)
legend('topleft', legend = c("GHD" , "HYP" , "NIG"),
col = col.def[-c(1,5)], pch = 1:3)
## Diagnostics
AIC <- stepAIC.ghyp(yret, dist = c('ghyp', 'hyp', 'NIG'), symmetric = FALSE,
control = list(maxit=1000))
LRghdnig <- lik.ratio.test(ghdfit , nigfit)
LRghdyp <- lik.ratio.test(ghdfit , hypfit)
#########----------VaR and ES derived from the GHD, HYP, and NIG------#########
## Probabilities
p <- seq(0.001 , 0.05 , 0.001)
## VaR
ghd.VaR <- abs(qghyp(p, ghdfit))
hyp.VaR <- abs(qghyp(p, hypfit))
nig.VaR <- abs(qghyp(p, nigfit))
nor.VaR <- abs(qnorm(p, mean = mean(yret),
sd = sd(c(yret[,1]))))
emp.VaR <- abs(quantile(x = yret, probs = p))
## Plot of VaR
plot(emp.VaR, type  = 'l', xlab = '', ylab = 'VaR',
axes = FALSE, ylim=range(c(hyp.VaR, nig.VaR, ghd.VaR,
nor.VaR, emp.VaR)))
box()
axis(1, at = seq(along=p), labels = names(emp.VaR),
tick = FALSE)
axis(2, at = pretty(range(emp.VaR, ghd.VaR, hyp.VaR,
nig.VaR, nor.VaR)))
lines(seq(along = p), ghd.VaR, col = 'red')
lines(seq(along = p), hyp.VaR, col = 'blue')
lines(seq(along = p), nig.VaR, col = 'green')
lines(seq(along = p), nor.VaR, col = 'orange')
legend('topright',
legend = c('Empirical', 'GHD', 'HYP', 'NIG', 'Normal'),
col = col.def, lty = 1)
## ES
ghd.ES <- abs(ESghyp(p, ghdfit))
hyp.ES <- abs(ESghyp(p, hypfit))
nig.ES <- abs(ESghyp(p, nigfit))
nor.ES <- abs(mean(yret)-sd(c(yret[,1]))*
dnorm(qnorm(1-p))/p)
obs.p <- ceiling(p * length(yret))
emp.ES <- sapply(obs.p, function(x) abs(mean(sort(c(yret))
[1:x])))
## Plot of ES
plot(emp.ES, type = 'l', xlab = '', ylab = 'ES', axes = FALSE,
ylim = range(c(hyp.ES, nig.ES, ghd.ES, nor.ES, emp.ES)))
box()
axis(1, at = 1:length(p), labels = names(emp.VaR),
tick = FALSE)
axis(2, at = pretty(range(emp.ES, ghd.ES, hyp.ES, nig.ES,
nor.ES)))
lines(1:length(p), ghd.ES, col = 'red')
lines(1:length(p), hyp.ES, col = 'blue')
lines(1:length(p), nig.ES, col = 'green')
lines(1:length(p), nor.ES, col = 'orange')
legend('topright',
legend = c('Empirical', 'GHD', 'HYP', 'NIG', 'Normal'),
col = col.def, lty = 1)
}
VaRES(Vniki)
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki)
DensityImageSave==TRUE
DensityImageSave=TRUE
DensityImageSave==TRUE
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki)
help(VaRES)
VaRES
VaRES(Vniki, DensityImageSave = TRUE )
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE , QQImageSave = TRUE)
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE , QQImageSave = TRUE)
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE )
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
source('ShapeTriangleFunction.R')
ShapeTriangle(path=path, df = df)
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df)
}
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df)
}
b = ShapeTriangle(path=path, df = dfList[1])
b
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
b = ShapeTriangle(path=path, df = dfList[1])
b
ShapeTriangle(path=path, df = dfList[1])
help(legend)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 104
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
res
Res
dim(Res)
-nrow(VaR)
VaR[-nrow(VaR), ]
dim(VaR[-nrow(VaR), ])
length(L[windowlen+1:length(L)])
length(Idx)
sp
L
361-104
ep
length(ep)
length(sp)
258+104
data ( SP500 ) 5
L[sp[1]:ep[1]]
length(L[sp[1]:ep[1]])
1:length(sp)
length(1:length(sp))
VaR
length(1:length(sp))
length(VaR)
dim(VaR)
length(sp)
length(ep)
length(L)
258+104
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 103
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
L[windowlen+1:length(L)]
L
L
L[windowlen+1:length(L)]
Res
options(warn=-1)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 103
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
help(fBasics)
??fBasics
??ghyp
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
