#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
source('ShapeTriangleFunction.R')
ShapeTriangle(path=path, df = df)
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df)
}
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df)
}
b = ShapeTriangle(path=path, df = dfList[1])
b
library(NormalLaplace)
library(numDeriv)
library(MASS)
library(timeDate)
library( ghyp )
library (timeSeries )
library ( fBasics )
library(e1071)
library(data.table)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
b = ShapeTriangle(path=path, df = dfList[1])
b
ShapeTriangle(path=path, df = dfList[1])
help(legend)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 104
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
res
Res
dim(Res)
-nrow(VaR)
VaR[-nrow(VaR), ]
dim(VaR[-nrow(VaR), ])
length(L[windowlen+1:length(L)])
length(Idx)
sp
L
361-104
ep
length(ep)
length(sp)
258+104
data ( SP500 ) 5
L[sp[1]:ep[1]]
length(L[sp[1]:ep[1]])
1:length(sp)
length(1:length(sp))
VaR
length(1:length(sp))
length(VaR)
dim(VaR)
length(sp)
length(ep)
length(L)
258+104
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 103
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
L[windowlen+1:length(L)]
L
L
L[windowlen+1:length(L)]
Res
options(warn=-1)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
## Loading of packages
library(lmomco)
library(FRAPO)
if (dim(Vniki)[1]>3000){
endpoint=dim(Vniki)[1]
startpoint=endpoint-400
} else{
startpoint=1
endpoint=dim(Vniki)[1]-2700
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
yret <- na.omit(diff(log(y))*100)
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
Idx <- yrets[,2]
L <- -100 * Idx
## Computing VaR ( Normal & GLD ) 99%, moving window
windowlen = 103
ep <- windowlen:length(L)
sp <- 1:length(ep)
level <- 0.99
VaR <- matrix(NA, ncol = 2, nrow = length(ep))
for(i in 1:length(sp)){
x <- L[sp[i]:ep[i]]
lmom <- lmom.ub(x)
fit <- pargld(lmom)
VaRGld <- quagld(level, fit)
VaRNor <- qnorm(level, mean(x), sd(x))
VaR[i,] <- c(VaRGld, VaRNor)
}
## Summarising results
Res <-  cbind(L[windowlen+1:length(L)], VaR[-nrow(VaR), ])
colnames(Res) <- c("Loss", "VaRGld", "VaRNor")
## Plot of backtest results
plot(Res[,"Loss"], type = "p", xlab = "Time Index",
ylim = c(-15, max(Res)))
abline(h = 0, col = "grey")
lines(Res[, "VaRGld"], col = "blue", lwd = 2)
lines(Res[, "VaRNor"], col = "red", lwd = 2)
legend("topleft", legend = c("Losses", "VaR GLD", "VaR Normal"),
col = c("black", "blue", "red"),
lty = c(NA, 1, 1), pch = c(19, NA, NA), bty = "n")
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
help(fBasics)
??fBasics
??ghyp
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
demo()
error.catching
error.catching()
base::error.catching
help(error.catching)
??error.catching
??Japanese
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex'
dfList = list.files(path, pattern = '*.csv')
dfList[1]
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
Vniki[1,5]
Vniki
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
ShapeTriangle(path=path, df = dfList[1])
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex/'
dfList = list.files(path, pattern = '*.csv')
#########-----------Fitting Stock returns to the GHD --------#############
Vniki <- read.csv(paste(path,dfList[1], sep = ''))
VaRES(Vniki, DensityImageSave = TRUE, QQImageSave = TRUE, VaRImageSave = TRUE, ESImageSave = TRUE )
#########--------------Shape triangle for HYP distribution------------#########
for (df in dfList[1:1]){
ShapeTriangle(path=path, df = df, ShapeSave=TRUE)
}
ShapeTriangle(path=path, df = dfList[1])
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300)
rd <- c(1, 5, 10, 20, 40)
rd
rd[2]
rd[5]
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex/'
dfList = list.files(path, pattern = '*.csv')
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=300, returndays = 1, confidencelevel = 0.99)
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=500, returndays = 1, confidencelevel = 0.95)
Vniki
if (dim(Vniki)[1]>maxDataPoints){
endpoint=dim(Vniki)[1]
startpoint=endpoint-maxDataPoints
} else{
startpoint=1
endpoint=dim(Vniki)[1]
}
if (dim(Vniki)[1]>maxDataPoints){
endpoint=dim(Vniki)[1]
startpoint=endpoint-500
} else{
startpoint=1
endpoint=dim(Vniki)[1]
}
if (dim(Vniki)[1]>500){
endpoint=dim(Vniki)[1]
startpoint=endpoint-500
} else{
startpoint=1
endpoint=dim(Vniki)[1]
}
y <- timeSeries(Vniki[startpoint:endpoint,"Adj.Close"],
charvec = as.character(Vniki[startpoint:endpoint,2]))
غ
y
dim(y)
yret <- na.omit(diff(log(y))*100)
yret
rd <- c(1, 5, 10, 20, 40)
yrets <- na.omit(matrix(unlist(lapply(rd, function(x) diff(log(y),
lag = x))), ncol = 5))
yrets
dim(yrets)
y
yrets
yrets[461,5]
dim(y)
y
data.frame(y)
z=data.frame(y)
dim(z)
z.index
index2wealth(z)
z
Vniki
dim(vniki)
dim(Vniki)
Vniki$Date
yrets
dim(yrets)
dim(yrets)[1]
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):,]
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):]
(dim(Vniki)[1]-dim(yrets)[1])
Vniki$Date
Vniki$Date[200:300]
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):(dim(Vniki)[1]]
(dim(Vniki)[1]-dim(yrets)[1])
(dim(Vniki)[1]
(dim(Vniki)[1]
12
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):(dim(Vniki[1])]
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):(dim(Vniki)[1])]
dim(Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):(dim(Vniki)[1])])
length(Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]):(dim(Vniki)[1])])
length(Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]+1):(dim(Vniki)[1])])
dim(yrets)
Vniki$Date[(dim(Vniki)[1]-dim(yrets)[1]+1):(dim(Vniki)[1])]
Vniki$J.Date[(dim(Vniki)[1]-dim(yrets)[1]+1):(dim(Vniki)[1])]
res
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=500, returndays = 1, confidencelevel = 0.95, exportdata=TRUE, expath='D:/R_project/MarketRiskModeling/Raw/OverallIndex/OverallInx.csv')
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=500, returndays = 1, confidencelevel = 0.95, exportdata=TRUE, expath='D:/R_project/MarketRiskModeling/Raw/OverallIndex/OverallInx.csv')
Res
source("VaRESFunction.R")
source('ShapeTriangleFunction.R')
source('VaRBackTestFunction.R')
#########----------------Import Data-------------#########
#path = 'D:/R_project/MarketRiskModeling/Raw/AdjPrice/'
path = 'D:/R_project/MarketRiskModeling/Raw/OverallIndex/'
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=500, returndays = 1, confidencelevel = 0.95, exportdata=TRUE, expath='D:/R_project/MarketRiskModeling/Raw/OverallIndex/OverallInx.csv')
#########----------------Fitting QCOM returns to the GLD-------------#########
VaRBackTest(path = path, df = dfList[1], ShapeSave = TRUE, maxDataPoints=1500, returndays = 1, confidencelevel = 0.95, exportdata=TRUE, expath='D:/R_project/MarketRiskModeling/Raw/OverallIndex/OverallInx.csv')
